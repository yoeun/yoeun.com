require 'rubygems'
require 'bundler/setup'
require 'rspec/core/rake_task'

port = 1981

desc "Default task starts application"
task :default => :restart

desc "Start application"
task :start do
  puts "Starting the application... "
  `thin -s 1 -R ./config.ru -p #{port} start`
  puts "Running on 0.0.0.0:#{port}\n"
end

desc "Stop application"
task :stop do
  pid = "tmp/pids/thin.#{port}.pid"
  if File.exists? pid
    print "Stopping the application... "
    `thin stop -P #{pid}`
    print "Stopped\n"
  else
    puts "Application not running"
  end
end

desc "Restart application"
task :restart => [:stop, :start]

task :install do
  # 0. Check if nginx installed
  # 1. Copy config file in sites-available
  # 2. Edit config file with appropriate values
  # 3. Enable site by symlinking config file
  # 4. Restart nginx
  
  unless which('nginx').nil?

  end

  # cp /etc/nginx/sites-available/default /etc/nginx/sites-available/myapp
  # ln -s /etc/nginx/sites-available/myapp /etc/nginx/sites-enabled/myapp
end

task :remove do
  # 1. Remove symlink from sites-enabled
  # 2. Restart nginx
end

if !defined?(RSpec)
  puts "spec targets require RSpec"
else
  desc "Run all specs"
  RSpec::Core::RakeTask.new(:spec) do |t|
    t.rspec_opts = ['-cfs']
  end
end

def which(cmd)
  exts = ENV['PATHEXT'] ? ENV['PATHEXT'].split(';') : ['']
  ENV['PATH'].split(File::PATH_SEPARATOR).each do |path|
    exts.each { |ext|
      exe = File.join(path, "#{cmd}#{ext}")
      return exe if File.executable? exe
    }
  end
  return nil
end